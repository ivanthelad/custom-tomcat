#!/bin/bash
#. $(dirname $0)/common.sh
#. /usr/local/s2i/common.sh
# common shell routines for s2i scripts

# insert settings for HTTP proxy into settings.xml if supplied






function configure_proxy()  {
  if [ -n "$HTTP_PROXY_HOST" -a -n "$HTTP_PROXY_PORT" ]; then
    xml="<proxy>\
         <id>genproxy</id>\
         <active>true</active>\
         <protocol>http</protocol>\
         <host>$HTTP_PROXY_HOST</host>\
         <port>$HTTP_PROXY_PORT</port>"
    if [ -n "$HTTP_PROXY_USERNAME" -a -n "$HTTP_PROXY_PASSWORD" ]; then
      xml="$xml\
         <username>$HTTP_PROXY_USERNAME</username>\
         <password>$HTTP_PROXY_PASSWORD</password>"
    fi
    if [ -n "$HTTP_PROXY_NONPROXYHOSTS" ]; then
      xml="$xml\
         <nonProxyHosts>$HTTP_PROXY_NONPROXYHOSTS</nonProxyHosts>"
    fi
  xml="$xml\
       </proxy>"
    sed -i "s|<!-- ### configured http proxy ### -->|$xml|" $HOME/.m2/settings.xml
  fi
}

# insert settings for mirrors/repository managers into settings.xml if supplied
function configure_mirrors() {
  if [ -n "$MAVEN_MIRROR_URL" ]; then
    xml="    <mirror>\
      <id>mirror.default</id>\
      <url>$MAVEN_MIRROR_URL</url>\
      <mirrorOf>external:*</mirrorOf>\
    </mirror>"
    sed -i "s|<!-- ### configured mirrors ### -->|$xml|" $HOME/.m2/settings.xml
  fi
}

# XXX: need to parameterize the globs; tomcat7 just .war
function copy_artifacts() {
  d="$1"
  if [ -d $LOCAL_SOURCE_DIR/$d ]; then
    echo "Copying all $@ artifacts from $LOCAL_SOURCE_DIR/$d directory into $DEPLOY_DIR for later deployment..."
    shift
    while [ $# -gt 0 ]; do
        cp -v $LOCAL_SOURCE_DIR/$d/*.$1 $DEPLOY_DIR 2> /dev/null
        shift
    done
  fi
}

# handle incremental builds. If we have been passed build artifacts, untar
# them over the supplied source.
function manage_incremental_build() {
    if [ -d /tmp/artifacts ]; then
        echo "Expanding artifacts from incremental build..."
        ( cd /tmp/artifacts && tar cf - . ) | ( cd ${HOME} && tar xvf - )
        rm -rf /tmp/artifacts
    fi
}

# s2i 'save-artifacts' routine
function s2i_save_build_artifacts()  {
    cd ${HOME}
    tar cf - .m2
}

# optionally clear the local maven repository after the build
function clear_maven_repository()  {
    mcr=$(echo "${MAVEN_CLEAR_REPO}" | tr [:upper:] [:lower:])
    if [ "${mcr}" = "true" ]; then
        rm -rf ${HOME}/.m2/repository/*
    fi
}



JWS_HOME=/usr/local/tomcat
# Source code provided to S2I is at ${HOME}/source
#ls -l /opt/s2i/destination/*

LOCAL_SOURCE_DIR=${HOME}/source
mkdir -p $LOCAL_SOURCE_DIR

DEPLOY_DIR=$JWS_HOME/webapps

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build artifacts
ARTIFACT_DIR=${ARTIFACT_DIR:-target}

# Copy the source for compilation
cp -Rf /opt/s2i/destination/src/. $LOCAL_SOURCE_DIR
#ls -l -R $LOCAL_SOURCE_DIR
echo step1
if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
  echo "Copying config files from project..."

  if [ -f $LOCAL_SOURCE_DIR/configuration/settings.xml ]; then
    mkdir -p $HOME/.m2
    mv $LOCAL_SOURCE_DIR/configuration/settings.xml $HOME/.m2
  fi
  echo step 5 
  cp -v $LOCAL_SOURCE_DIR/configuration/* $JWS_HOME/conf/
fi
echo step2
#configure_proxy
#configure_mirrors
echo step3
#manage_incremental_build

# If a pom.xml is present, this is a normal build scenario
# so run maven.
ls -l  $LOCAL_SOURCE_DIR
if [ -f $LOCAL_SOURCE_DIR/pom.xml ]; then
 echo step4-1
  pushd $LOCAL_SOURCE_DIR &> /dev/null
  echo step4
  MAVEN_ARGS=${MAVEN_ARGS--e -Popenshift -DskipTests -Dcom.redhat.xpaas.repo.redhatga package}

  # Always force IPv4 (CLOUD-188)
  # Append user-supplied arguments (CLOUD-412)
  MAVEN_ARGS="$MAVEN_ARGS -Djava.net.preferIPv4Stack=true ${MAVEN_ARGS_APPEND}"

  echo "Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  echo "Using $(mvn --version)"

  # Execute the actual build
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from Maven build"
    exit $ERR
  fi

  # Copy built artifacts (if any!) from the target/ directory
  # to the $DEPLOY_DIR directory for later deployment
  copy_artifacts "$ARTIFACT_DIR" war

  # optionally clear the local maven repository after the build
  clear_maven_repository

  popd &> /dev/null
fi
echo step 7
# Copy (probably binary) artifacts from the deployments/
# directory to the $DEPLOY_DIR directory for later deployment
copy_artifacts "deployments" war

if [ -d $LOCAL_SOURCE_DIR/lib ]; then
  echo "Copying libs from project..."
  cp -v $LOCAL_SOURCE_DIR/lib/* $JWS_HOME/lib/
fi
echo step 9

